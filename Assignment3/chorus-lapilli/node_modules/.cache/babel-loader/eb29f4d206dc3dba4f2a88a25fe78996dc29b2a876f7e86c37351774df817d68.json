{"ast":null,"code":"var _jsxFileName = \"/home/danielwu/Documents/Coding/UCLA/CS35L/Assignment3/chorus-lapilli/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nexport default function Board() {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [counter, setCounter] = useState(0);\n  const [isClicked, setClicked] = useState(false);\n  const [selectedSquare, setSelectedSquare] = useState(0);\n  const [squareMove, setSquareMove] = useState(null);\n  useEffect(() => {\n    console.log(\"Updated squares:\", squares);\n  }, [squares]);\n  function handleClick(i) {\n    const nextSquares = squares.slice(); // Copy the board state\n    // If the square is already occupied or the game is over, do nothing\n    if (nextSquares[i] || winner) {\n      return;\n    }\n    // First three moves, simply place the piece\n    if (counter < 3) {\n      if (xIsNext) {\n        nextSquares[i] = \"X\";\n      } else {\n        nextSquares[i] = \"O\";\n        setCounter(counter + 1);\n      }\n      if (i === 4) {\n        setCenterPiece(nextSquares[i]); // Set the piece in the center\n      }\n    } else {\n      // After the first three moves, players move their pieces\n      if (nextSquares[i] === (xIsNext ? 'X' : 'O') && !isClicked) {\n        // If the player clicks on their own piece, prepare to move it\n        setIsClicked(true);\n        setSelectedSquare(i); // Set the selected square to move\n        return;\n      }\n\n      // If an empty square is clicked after selecting a piece\n      if (!nextSquares[i] && isClicked) {\n        // Move the piece to the selected square\n        nextSquares[selectedSquare] = null; // Remove the piece from the original square\n        nextSquares[i] = xIsNext ? 'X' : 'O'; // Place the piece in the new square\n\n        // Enforce the rule to vacate the center if it's occupied\n        if (centerPiece === (xIsNext ? 'X' : 'O') && !winner) {\n          nextSquares[4] = null; // Vacate the center if necessary\n        }\n\n        // If the center is filled by the player, the player must either win or vacate the center\n        if (nextSquares[4] === (xIsNext ? 'X' : 'O') && !winner) {\n          nextSquares[i] = null; // If no winner, revert the move\n          nextSquares[selectedSquare] = xIsNext ? 'X' : 'O'; // Restore the original piece\n          setIsClicked(false);\n          return;\n        }\n        setIsClicked(false); // Reset the selected square\n      }\n    }\n    setSquares(nextSquares); // Update the board state\n    setXIsNext(!xIsNext);\n    // if(squares[i] && isClicked && calculateWinner(squares)){return;}\n    // const nextSquares = squares.slice();\n    // let x = xIsNext ? \"X\" : \"O\";\n\n    // console.log(\"squares before:\" + squares)\n    // console.log(\"newsquares before:\" + nextSquares)\n\n    // if(counter < 3)\n    // {\n    //   if (xIsNext) {\n    //     nextSquares[i] = \"X\";\n    //   } else {\n    //     nextSquares[i] = \"O\";\n    //     setCounter(counter+1)\n    //   }\n    //   if(i == 4){setSquareMove(x);}\n    // } else {\n    //   if(squares[i] === x && !isClicked)\n    //   {\n    //     setClicked(true);\n    //     setSquareTemp(i);\n    //     return;\n    //   } else if (!squares[i] && isClicked){\n    //     nextSquares[squareTemp] = null;\n    //     nextSquares[i] = x;\n    //     if((nextSquares[4] === x) && !calculateWinner(nextSquares))\n    //     {\n    //       nextSquares[i] = null;\n    //       nextSquares[squareTemp] = x;\n    //       setClicked(false);\n    //       return;\n    //     }\n\n    //     setClicked(false);\n    //   } else {\n    //     return;\n    //   }\n\n    setSquareMove(nextSquares[4]);\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    console.log(\"squares after:\" + squares);\n    console.log(\"newsquares after:\" + nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => {\n          handleClick(0);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => {\n          handleClick(1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => {\n          handleClick(2);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => {\n          handleClick(3);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => {\n          handleClick(4);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => {\n          handleClick(5);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => {\n          handleClick(6);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => {\n          handleClick(7);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => {\n          handleClick(8);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"Xdt+UmhbwRpS231Z9nanMQAOXKg=\");\n_c2 = Board;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","squares","setSquares","Array","fill","xIsNext","setXIsNext","counter","setCounter","isClicked","setClicked","selectedSquare","setSelectedSquare","squareMove","setSquareMove","console","log","handleClick","i","nextSquares","slice","winner","setCenterPiece","setIsClicked","centerPiece","calculateWinner","status","_c2","lines","length","a","b","c","$RefreshReg$"],"sources":["/home/danielwu/Documents/Coding/UCLA/CS35L/Assignment3/chorus-lapilli/src/App.js"],"sourcesContent":["import {useEffect, useState} from 'react'\n\nfunction Square({value, onSquareClick}) {\n\n  return (\n    <button\n      className=\"square\"\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n\nexport default function Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null))\n  const [xIsNext, setXIsNext] = useState(true);\n\n\n\n  const [counter, setCounter] = useState(0);\n  const [isClicked, setClicked] = useState(false)\n  const [selectedSquare, setSelectedSquare] = useState(0);\n  const [squareMove, setSquareMove] = useState(null);\n\n  useEffect(() => {\n    console.log(\"Updated squares:\", squares);\n  }, [squares]);\n\n  function handleClick(i) \n  {\n    const nextSquares = squares.slice(); // Copy the board state\n    // If the square is already occupied or the game is over, do nothing\n    if (nextSquares[i] || winner) {\n      return;\n    }\n    // First three moves, simply place the piece\n    if (counter < 3) {\n      if (xIsNext) {\n        nextSquares[i] = \"X\";\n      } else {\n        nextSquares[i] = \"O\";\n        setCounter(counter+1)\n      }\n      if (i === 4) {\n        setCenterPiece(nextSquares[i]); // Set the piece in the center\n      }\n    } else {\n      // After the first three moves, players move their pieces\n      if (nextSquares[i] === (xIsNext ? 'X' : 'O') && !isClicked) {\n        // If the player clicks on their own piece, prepare to move it\n        setIsClicked(true);\n        setSelectedSquare(i); // Set the selected square to move\n        return;\n      }\n\n      // If an empty square is clicked after selecting a piece\n      if (!nextSquares[i] && isClicked) {\n        // Move the piece to the selected square\n        nextSquares[selectedSquare] = null; // Remove the piece from the original square\n        nextSquares[i] = xIsNext ? 'X' : 'O'; // Place the piece in the new square\n\n        // Enforce the rule to vacate the center if it's occupied\n        if (centerPiece === (xIsNext ? 'X' : 'O') && !winner) {\n          nextSquares[4] = null; // Vacate the center if necessary\n        }\n\n        // If the center is filled by the player, the player must either win or vacate the center\n        if (nextSquares[4] === (xIsNext ? 'X' : 'O') && !winner) {\n          nextSquares[i] = null; // If no winner, revert the move\n          nextSquares[selectedSquare] = xIsNext ? 'X' : 'O'; // Restore the original piece\n          setIsClicked(false);\n          return;\n        }\n\n        setIsClicked(false); // Reset the selected square\n      }\n    }\n\n    setSquares(nextSquares); // Update the board state\n    setXIsNext(!xIsNext);\n    // if(squares[i] && isClicked && calculateWinner(squares)){return;}\n    // const nextSquares = squares.slice();\n    // let x = xIsNext ? \"X\" : \"O\";\n\n    // console.log(\"squares before:\" + squares)\n    // console.log(\"newsquares before:\" + nextSquares)\n\n    // if(counter < 3)\n    // {\n    //   if (xIsNext) {\n    //     nextSquares[i] = \"X\";\n    //   } else {\n    //     nextSquares[i] = \"O\";\n    //     setCounter(counter+1)\n    //   }\n    //   if(i == 4){setSquareMove(x);}\n    // } else {\n    //   if(squares[i] === x && !isClicked)\n    //   {\n    //     setClicked(true);\n    //     setSquareTemp(i);\n    //     return;\n    //   } else if (!squares[i] && isClicked){\n    //     nextSquares[squareTemp] = null;\n    //     nextSquares[i] = x;\n    //     if((nextSquares[4] === x) && !calculateWinner(nextSquares))\n    //     {\n    //       nextSquares[i] = null;\n    //       nextSquares[squareTemp] = x;\n    //       setClicked(false);\n    //       return;\n    //     }\n        \n    //     setClicked(false);\n    //   } else {\n    //     return;\n    //   }\n  \n    setSquareMove(nextSquares[4])\n    setSquares(nextSquares);\n    setXIsNext(!xIsNext);\n    console.log(\"squares after:\" + squares)\n    console.log(\"newsquares after:\" + nextSquares)\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  return (\n    <>\n    <div className='status'>{status}</div>\n    <div className=\"board-row\">\n      <Square value={squares[0]} onSquareClick={()=>{handleClick(0)}}/>\n      <Square value={squares[1]} onSquareClick={()=>{handleClick(1)}}/>\n      <Square value={squares[2]} onSquareClick={()=>{handleClick(2)}}/>\n    </div>\n      \n    <div className=\"board-row\">\n      <Square value={squares[3]} onSquareClick={()=>{handleClick(3)}}/>\n      <Square value={squares[4]} onSquareClick={()=>{handleClick(4)}}/>\n      <Square value={squares[5]} onSquareClick={()=>{handleClick(5)}}/>\n    </div>\n\n    <div className=\"board-row\">\n      <Square value={squares[6]} onSquareClick={()=>{handleClick(6)}}/>\n      <Square value={squares[7]} onSquareClick={()=>{handleClick(7)}}/>\n      <Square value={squares[8]} onSquareClick={()=>{handleClick(8)}}/>\n    </div>\n    </>\n  );\n  \n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}